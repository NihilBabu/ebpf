
struct socket
{
    __u32 len;
    __u32 pkt_type;
    __u32 mark;
    __u32 queue_mapping;
    __u32 protocol;
    __u32 vlan_present;
    __u32 vlan_tci;
    __u32 vlan_proto;
    __u32 priority;
    __u32 ingress_ifindex;
    __u32 ifindex;
    __u32 tc_index;
    __u32 cb[5];
    __u32 hash;
    __u32 tc_classid;
    __u32 data;
    __u32 data_end;
    __u32 napi_id;

    /* Accessed by BPF_PROG_TYPE_sk_skb types from here to ... */
    __u32 family;
    __u32 remote_ip4;    /* Stored in network byte order */
    __u32 local_ip4;     /* Stored in network byte order */
    __u32 remote_ip6[4]; /* Stored in network byte order */
    __u32 local_ip6[4];  /* Stored in network byte order */
    __u32 remote_port;   /* Stored in network byte order */
    __u32 local_port;    /* stored in host byte order */
    /* ... here. */

    __u32 data_meta;
    __bpf_md_ptr(struct bpf_flow_keys *, flow_keys);
    __u64 tstamp;
    __u32 wire_len;
    __u32 gso_segs;
    __bpf_md_ptr(struct bpf_sock *, sk);
    __u32 gso_size;
};

struct tcp_sock
{
    __u32 snd_cwnd; /* Sending congestion window		*/
    __u32 srtt_us;  /* smoothed round trip time << 3 in usecs */
    __u32 rtt_min;
    __u32 snd_ssthresh;     /* Slow start size threshold		*/
    __u32 rcv_nxt;          /* What we want to receive next		*/
    __u32 snd_nxt;          /* Next sequence we send		*/
    __u32 snd_una;          /* First byte we want an ack for	*/
    __u32 mss_cache;        /* Cached effective mss, not including SACKS */
    __u32 ecn_flags;        /* ECN status bits.			*/
    __u32 rate_delivered;   /* saved rate sample: packets delivered */
    __u32 rate_interval_us; /* saved rate sample: time elapsed */
    __u32 packets_out;      /* Packets which are "in flight"	*/
    __u32 retrans_out;      /* Retransmitted packets out		*/
    __u32 total_retrans;    /* Total retransmits for entire connection */
    __u32 segs_in;          /* RFC4898 tcpEStatsPerfSegsIn
                             * total number of segments in.
                             */
    __u32 data_segs_in;     /* RFC4898 tcpEStatsPerfDataSegsIn
                             * total number of data segments in.
                             */
    __u32 segs_out;         /* RFC4898 tcpEStatsPerfSegsOut
                             * The total number of segments sent.
                             */
    __u32 data_segs_out;    /* RFC4898 tcpEStatsPerfDataSegsOut
                             * total number of data segments sent.
                             */
    __u32 lost_out;         /* Lost packets			*/
    __u32 sacked_out;       /* SACK'd packets			*/
    __u64 bytes_received;   /* RFC4898 tcpEStatsAppHCThruOctetsReceived
                             * sum(delta(rcv_nxt)), or how many bytes
                             * were acked.
                             */
    __u64 bytes_acked;      /* RFC4898 tcpEStatsAppHCThruOctetsAcked
                             * sum(delta(snd_una)), or how many bytes
                             * were acked.
                             */
    __u32 dsack_dups;       /* RFC4898 tcpEStatsStackDSACKDups
                             * total number of DSACK blocks received
                             */
    __u32 delivered;        /* Total data packets delivered incl. rexmits */
    __u32 delivered_ce;     /* Like the above but only ECE marked packets */
    __u32 icsk_retransmits; /* Number of unrecovered [RTO] timeouts */
};